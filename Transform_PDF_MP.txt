let
    /**
     * Función para extraer y transformar datos de resúmenes de movimientos desde archivos PDF
     * @param TablePDF: Archivo PDF en formato binario
     * @return: Tabla con los movimientos procesados y limpiados
     */
    Transform_PDF = (TablePDF as binary) as table =>
        let
            // ===== EXTRACCIÓN INICIAL DE DATOS =====
            
            // Extraer todas las tablas del PDF usando la implementación 1.3
            Origen = Pdf.Tables(TablePDF, [Implementation="1.3"]),
            
            // Filtrar solo los elementos que son tablas (excluyendo texto plano, imágenes, etc.)
            SeleccionarTablas = Table.SelectRows(Origen, each ([Kind] = "Table")),
            
            // ===== TRANSFORMACIÓN DE CADA TABLA =====
            
            // Procesar cada tabla individualmente aplicando las transformaciones necesarias
            Transformar = Table.TransformColumns(
                SeleccionarTablas,
                {
                    {
                        "Data", 
                        each 
                            let
                                // DesambiguarTabla
                                Tablas = _,
                                
                                // Eliminar filas completamente vacías o que solo contengan valores nulos/vacíos
                                LimpiarFilasNull = Table.SelectRows(
                                    Tablas, 
                                    each not List.IsEmpty(
                                        List.RemoveMatchingItems(Record.FieldValues(_), {"", null})
                                    )
                                ),
                                
                                // Normalizar nombres de columnas - específicamente "ID de la operación"
                                RenombrarCol = 
                                    Table.TransformColumnNames(
                                        LimpiarFilasNull, each 
                                        if Text.Contains(_, "Column1") then "Fecha" else 
                                        if Text.Contains(_, "Column2") then "Descripción" else
                                        if Text.Contains(_, "Column3") then "ID de la operación" else 
                                        if Text.Contains(_, "Column4") then "Valor" else 
                                        if Text.Contains(_, "Column5") then "Saldo" else _
                                    ),
                                
                                // Eliminar filas donde el ID de operación sea literalmente "operación" (encabezado duplicado)
                                LimpiarFilas = Table.SelectRows(
                                    RenombrarCol, 
                                    each ([#"ID de la operación"] <> "operación") and ([Fecha] <> "Fecha")
                                ),
                                
                                // Reemplazar valores nulos en la columna Descripción con espacios en blanco
                                ReemplazarNull = Table.ReplaceValue(
                                    LimpiarFilas, 
                                    null, 
                                    " ", 
                                    Replacer.ReplaceValue, 
                                    {"Descripción"}
                                )
                            in
                                ReemplazarNull
                    }
                }
            ),
            
            // ===== PROCESAMIENTO DE PÁGINAS Y EXPANSIÓN =====
            
            // Extraer número de página desde el nombre del archivo (formato: "nombre(página)")
            AgregarPagina = Table.AddColumn(
                Transformar, 
                "Page", 
                each Text.BetweenDelimiters([Name], "(", ")"), 
                type text
            ),
            
            // Mantener solo las columnas necesarias: Page y Data
            SeleccionarColumnas = Table.SelectColumns(
                AgregarPagina, 
                {"Page", "Data"}
            ),
            
            // Expandir la columna Data para obtener todas las columnas de las tablas anidadas
            ExpandirData = Table.ExpandTableColumn(
                SeleccionarColumnas, 
                "Data", 
                Table.ColumnNames(Table.Combine(SeleccionarColumnas[Data]))
            ),
            
            // ===== COMBINACIÓN Y DIVISIÓN DE COLUMNAS =====
            
            // Combinar Fecha, Descripción e ID de operación en una sola columna para procesamiento
            CombinarColumnas = Table.CombineColumns(
                ExpandirData,
                {"Fecha", "Descripción", "ID de la operación"},
                Combiner.CombineTextByDelimiter("", QuoteStyle.None),
                "Combinada"
            ),
            
            // Primera división: separar fecha (primeros 10 caracteres) del resto
            DividirPorPosicion = Table.SplitColumn(
                CombinarColumnas, 
                "Combinada", 
                Splitter.SplitTextByPositions({0, 10}, false), 
                {"Fecha", "DescripcionID"}
            ),
            
            // Preparar para extraer ID: invertir texto para trabajar desde el final
            InvertirTexto = Table.TransformColumns(
                DividirPorPosicion, 
                {{"DescripcionID", Text.Reverse}}
            ),
            
            // División por transición de caracteres: separar ID numérico de la descripción
            DividirPorTransicion = Table.SplitColumn(
                InvertirTexto, 
                "DescripcionID", 
                Splitter.SplitTextByCharacterTransition(
                    {"0".."9"}, 
                    (c) => not List.Contains({"0".."9"}, c)
                ), 
                {"IDInvertido", "DescripcionInvertida"}
            ),
            
            // Restaurar texto original y limpiar caracteres de salto de línea
            RestaurarTexto = Table.TransformColumns(
                DividirPorTransicion,
                {
                    {"DescripcionInvertida", each Text.Reverse(Text.Replace(_, "#(lf)", " ")), type text}, 
                    {"IDInvertido", Text.Reverse, type text}
                }
            ),
            
            // ===== ORDENAMIENTO Y RENOMBRADO FINAL =====
            
            // Reordenar columnas en el orden lógico deseado
            ReordenarColumnas = Table.ReorderColumns(
                RestaurarTexto,
                {"Page", "Fecha", "DescripcionInvertida", "IDInvertido", "Valor", "Saldo"}
            ),
            
            // Renombrar columnas a los nombres finales esperados
            // Mapear nombres actuales con los nombres de la tabla expandida original
            RenombrarColumnas = Table.RenameColumns(
                ReordenarColumnas,
                {
                    {"DescripcionInvertida", "Descripción"},
                    {"IDInvertido", "ID de la operación"}
                }
            ),
            
            // ===== LIMPIEZA FINAL =====
            
            // Eliminar filas donde Valor o Saldo estén vacíos o sean nulos
            // Estas filas generalmente son encabezados duplicados o datos incompletos
            QuitarFilasVacias = Table.SelectRows(
                RenombrarColumnas, 
                each [Valor] <> null and [Valor] <> "" and [Saldo] <> null and [Saldo] <> ""
            )
        in
            // Manejo de errores: si falla el procesamiento, devolver tabla vacía
            try QuitarFilasVacias 
            otherwise Table.FromList({})
in
    Transform_PDF
